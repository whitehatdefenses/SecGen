#!/usr/bin/env python
import sys
import os
import shutil
import argparse
import subprocess
import shlex
import pydoc
import getpass
import glob
import zipfile
import time
import saki
import ParseLabtainerConfig

instructor_cwd = os.getcwd()
student_cwd = instructor_cwd.replace('labtainer-instructor', 'labtainer-student')
# Append Student CWD to sys.path
sys.path.append(student_cwd+"/bin")
sys.path.append(os.path.join(instructor_cwd, 'assess_bin'))
import labutils
import logging
import LabtainerLogging
import docgoals
FAILURE=1
# Copy Students' Artifacts from host to instructor's lab container
def CopyStudentArtifacts(labtainer_config, container_name, labname, regress_test, check_watermark):
    # Set the lab name 
    command = 'docker exec %s script -q -c "mkdir -p /home/instructor/.local" /dev/null' % (container_name)
    logger.debug("Command to execute is (%s)" % command)
    result = subprocess.call(command, shell=True)
    logger.debug("Result of subprocess.call CopyStudentArtifacts set labname is %s (1=>FAILURE)" % result)
    if result == FAILURE:
        logger.error("Failed to set labname in container %s!\n" % container_name)
        sys.exit(1)

    command = 'docker exec %s script -q -c "echo %s > /home/instructor/.local/.labname" /dev/null' % (container_name, labname)
    logger.debug("Command to execute is (%s)" % command)
    result = subprocess.call(command, shell=True)
    logger.debug("Result of subprocess.call CopyStudentArtifacts set labname is %s (1=>FAILURE)" % result)
    if result == FAILURE:
        logger.error("Failed to set labname in container %s!\n" % container_name)
        sys.exit(1)

    # Create is_grade_container
    username = getpass.getuser()
    # Make sure check for is_regress_test first
    if regress_test is not None:
        xfer_dir = ""
        # then check if it is watermark test required
        if check_watermark:
            xfer_dir = os.path.join(labtainer_config.watermark_root, labname)
        else:
            xfer_dir = os.path.dirname(regress_test)
        zip_filelist = glob.glob('%s/*.zip' % xfer_dir)
    else:
        xfer_dir = os.path.join(labtainer_config.host_home_xfer, labname)
        zip_filelist = glob.glob('/home/%s/%s/*.zip' % (username, xfer_dir))
    logger.debug("zip_filelist is (%s)" % zip_filelist)
    # Copy zip files from 'Shared' folder to 'home/$CONTAINER_USER'
    for fname in zip_filelist:
        logger.debug("name is %s" % fname)
        base_fname = os.path.basename(fname)
        # Copy zip file 
        command = 'docker cp "%s" %s:/home/instructor/' % (fname, container_name)
        logger.debug("Command to execute is (%s)" % command)
        result = subprocess.call(shlex.split(command))
        logger.debug("Result of subprocess.call CopyStudentArtifacts copy zipfile (%s) is %s (1=>FAILURE)" % (fname, result))
        if result == FAILURE:
            logger.error("Failed to copy student artifacts into container %s!\n" % container_name)
            sys.exit(1)

def InstDocsToHostDir(labname, labtainer_config, lab_path):
    xfer_dir = os.path.join(labtainer_config.host_home_xfer, labname)
    username = getpass.getuser()
    host_home_xfer = '/home/%s/%s' % (username, xfer_dir)
    logger.debug("path to work with is (%s)" % host_home_xfer)
    logger.debug("labname is (%s)" % labname)
    docsdir_created = False
    docsdir_path = '%s/docs' % host_home_xfer

    # create temporary directory
    tmpdir = '%s/.tmpdir' % host_home_xfer
    labutils.createDirectoryPath(tmpdir)

    split_string = '.%s.zip' % labname

    zip_filelist = glob.glob('%s/*.zip' % host_home_xfer)
    logger.debug("filenames is (%s)" % zip_filelist)
    tmpdocszip = '%s/docs.zip' % tmpdir
    # Process each zip file in host_home_xfer
    for fname in zip_filelist:
        ZipFileName = os.path.basename(fname)
        # Note: at this point the ZipFileName should not have the 'containername' yet
        #       the format should be <student_email>.<labname>.zip
        logger.debug("ZipFileName is (%s)" % ZipFileName)

        # Try unpacking the zip file into temporary directory to check if docs.zip exist
        zipoutput = zipfile.ZipFile(fname, "r")
        ''' retain dates of student files '''
        for zi in zipoutput.infolist():
            logger.debug('zi is %s tmpdir is %s' % (zi.filename, tmpdir))
            zipoutput.extract(zi, tmpdir)
            date_time = time.mktime(zi.date_time + (0, 0, -1))
            dest = os.path.join(tmpdir, zi.filename)
            os.utime(dest, (date_time, date_time))
        zipoutput.close()

        # If docs.zip exist
        if os.path.exists(tmpdocszip):
            # Time to create docs directory if it hasn't been created
            if not docsdir_created:
                docsdir_created = True
                labutils.createDirectoryPath(docsdir_path)

            # Note: at this point the ZipFileName should not have the 'containername' yet
            #       the format should be <student_email>.<labname>.zip
            splitlist = ZipFileName.split(split_string)
            student_email = splitlist[0]
            student_emaildir = '%s/%s' % (docsdir_path, student_email)
            logger.debug("student_email is (%s)" % student_email)
            logger.debug("student_emaildir is (%s)" % student_emaildir)

            # Create student's e-mail directory (if it does not exist)
            labutils.createDirectoryPath(student_emaildir)
            # Unpacking the docs.zip file into student's e-mail directory
            zipoutput = zipfile.ZipFile(tmpdocszip, "r")
            ''' retain dates of student files '''
            for zi in zipoutput.infolist():
                zipoutput.extract(zi, student_emaildir)
                date_time = time.mktime(zi.date_time + (0, 0, -1))
                dest = os.path.join(student_emaildir, zi.filename)
                os.utime(dest, (date_time, date_time))
            zipoutput.close()

        # remove and re-create temporary directory for the students' zip file
        shutil.rmtree(tmpdir, ignore_errors=True)
        os.makedirs(tmpdir)

    # Finally done for all students' zip file in the host_home_xfer directory
    # Final removal of temporary directory
    shutil.rmtree(tmpdir, ignore_errors=True)

def copyAssessBin(container_name):
    tmp_dir='/tmp/assess_bin'
    shutil.rmtree(tmp_dir, ignore_errors=True)
    try:
        os.makedirs(tmp_dir)
    except:
        logger.error("did not expect to find dir %s" % tmp_dir)
    shutil.copytree('assess_bin', os.path.join(tmp_dir, 'bin'))
    shutil.copyfile('../labtainer-student/bin/LabCount.py', os.path.join(tmp_dir, 'bin', 'LabCount.py'))
    shutil.copyfile('../labtainer-student/lab_bin/ParameterParser.py', os.path.join(tmp_dir, 'bin', 'ParameterParser.py'))
    shutil.copyfile('../labtainer-student/lab_bin/ParameterizeLogging.py', os.path.join(tmp_dir, 'bin', 'ParameterizeLogging.py'))
    
    command = 'docker cp /tmp/assess_bin/bin  %s:/home/instructor/.local/' % (container_name)
    logger.debug("Command to execute is (%s)" % command)
    result = subprocess.call(shlex.split(command))
    logger.debug("Result of subprocess.call %s (1=>FAILURE)" % (result))
    if result == FAILURE:
        logger.error("Failed copy assess_bin %s!\n" % container_name)
        sys.exit(1)

def copyChownGradesFile(labtainer_config, labname, grade_container, container_user, copy_json):
    host_home_xfer = os.path.join(labtainer_config.host_home_xfer, labname)

    username = getpass.getuser()

    # Copy <labname>.grades.txt file
    grade_filename = '/home/%s/%s.grades.txt' % (container_user, labname)
    command = "docker cp %s:%s /home/%s/%s" % (grade_container, grade_filename, username, host_home_xfer)
    logger.debug("Command to execute is (%s)" % command)
    result = subprocess.call(shlex.split(command))
    logger.debug("Result of subprocess.Popen exec cp %s.grades.txt file is %s" % (labname, result))
    if result == FAILURE:
        # try grabbing instructor.log
        command = "docker cp %s:/tmp/instructor.log /tmp/instructor.log" % (grade_container)
        result = subprocess.call(shlex.split(command))
        logger.debug("Result of subprocess.Popen exec cp instructor.log file is %s" % (result))
        cmd = 'docker stop %s' % grade_container
        labutils.DockerCmd(cmd)

    if copy_json:
        # Copy <labname>.grades.json file
        gradejson_filename = '/home/%s/%s.grades.json' % (container_user, labname)
        command = "docker cp %s:%s /home/%s/%s" % (grade_container, gradejson_filename, username, host_home_xfer)
        logger.debug("Command to execute is (%s)" % command)
        result = subprocess.call(shlex.split(command))
        logger.debug("Result of subprocess.Popen exec cp %s.grades.json file is %s" % (labname, result))
        if result == FAILURE:
            cmd = 'docker stop %s' % grade_container
            labutils.DockerCmd(cmd)


def diddleProfile(container_name):
    command = 'docker exec %s script -q -c "/home/instructor/.local/bin/rootprofile.sh" /dev/null' % (container_name)
    logger.debug("Command to execute is (%s)" % command)
    result = subprocess.call(command, shell=True)
    logger.debug("Result of subprocess.call CopyStudentArtifacts set labname is %s (1=>FAILURE)" % result)
    if result == FAILURE:
        logger.error("Failed to set labname in container %s!\n" % container_name)
        sys.exit(1)

def autoGrade(grade_container, lab_path, labtainer_config, labname, copy_json):
    cmd = "docker exec %s bash -c 'su - instructor -c \"cd;.local/bin/instructor.py\"'" % (grade_container)
    if not labutils.DockerCmd(cmd):
        logger.error('trouble with %s' % cmd)
    copyChownGradesFile(labtainer_config, labname, grade_container, 'instructor', copy_json)
    username = getpass.getuser()
    host_xfer = os.path.join('/home', username, labtainer_config.host_home_xfer, labname)
    fglob = glob.glob(host_xfer+'/*grades.txt')
    if len(fglob) == 0:
        print('No grades.txt file at %s' % host_xfer)
    else:
        with open(fglob[0]) as fh:
            for line in fh:
                print line.rstrip()
    cmd = 'docker stop %s' % grade_container
    labutils.DockerCmd(cmd)

def getGradeImageName(labtainer_config, registry):
    image_name = 'labtainer.grader'
    image_info = labutils.imageInfo(image_name , registry, labtainer_config)
    if image_info is None:
        logger.error('Could not find image for %s' % image_name)
        exit(1)
    else:
        new_image_name = image_name
        if not image_info.local_build:
            new_image_name = '%s/%s' % (registry, image_name)
        if not image_info.local:
            labutils.dockerPull(registry, image_name)
    return new_image_name

def getRegistry(use_test_registry, labtainer_config):
    if not use_test_registry:
        env_test_registry = os.getenv('TEST_REGISTRY')
        if env_test_registry is not None and (env_test_registry.lower() == 'yes' or env_test_registry.lower() == 'true'):
            use_test_registry = True
    if use_test_registry:
        return labtainer_config.test_registry
    else:
        return labtainer_config.default_registry

def moreTerm(labname):
    grade_container = '%s-igrader' % labname
    spawn_command = "gnome-terminal -- docker exec -it %s bash -l cd /home/instructor &" % 	grade_container
    logger.debug("spawn_command is (%s)" % spawn_command)
    os.system(spawn_command)

def doGrade(labname, use_test_registry, debug, redo, update, regress_test=None, copy_json=True):
    grade_container = '%s-igrader' % labname
    if redo:
        cmd = 'docker stop %s' % grade_container
        labutils.DockerCmd(cmd)
        cmd = 'docker rm %s' % grade_container
        labutils.DockerCmd(cmd)
    lab_path = os.path.join(os.path.abspath('../../labs'), labname)
    if not os.path.isdir(lab_path):
        print('No lab found at %s' % lab_path)
        exit(1)
    labtainer_config_dir = os.path.join(os.path.dirname(os.path.dirname(lab_path)), 'config', 'labtainer.config')
    labtainer_config = ParseLabtainerConfig.ParseLabtainerConfig(labtainer_config_dir, logger)
    registry = getRegistry(use_test_registry, labtainer_config)
    grade_image = getGradeImageName(labtainer_config, registry)
    if update:
        removeGraders(registry)
    saki.checkBulkSaki(labname)
    if not labutils.IsContainerCreated(grade_container):
        docker0_IPAddr = labutils.getDocker0IPAddr()
        add_host_param = '--add-host my_host:%s' % (docker0_IPAddr)
        cmd = "docker create -t --name=%s %s --hostname=%s %s" % (grade_container, add_host_param, grade_container, grade_image)
        logger.debug("Command to execute was (%s)" % cmd)
        ps = subprocess.Popen(shlex.split(cmd), stdout=subprocess.PIPE,stderr=subprocess.PIPE)
        output = ps.communicate()
        if len(output[1]) > 0:
            logger.debug('command was %s' % cmd)
    else:
        logger.debug('Container already exists')
    labutils.StartMyContainer(grade_container)
    InstDocsToHostDir(labname, labtainer_config, lab_path)
    logger.debug('do CopyStudentArtifacts for %s, labname: %s ' % (grade_container, labname))
    copy_result = CopyStudentArtifacts(labtainer_config, grade_container, labname, 
                     regress_test, False)
    if copy_result == FAILURE:
        logger.error("Failed to copy students' artifacts to container %s!\n" % grade_container)
        exit(1)
    copyAssessBin(grade_container)
    labutils.CopyInstrConfig(grade_container, 'instructor', lab_path)
    diddleProfile(grade_container)
    if debug:
        spawn_command = "gnome-terminal -- docker exec -it %s bash -l cd /home/instructor &" % 	grade_container
        logger.debug("spawn_command is (%s)" % spawn_command)
        os.system(spawn_command)
    else:
        autoGrade(grade_container, lab_path, labtainer_config, labname, copy_json)

def removeGraders(registry):
    cmd = 'docker ps -a'
    ps = subprocess.Popen(cmd, shell=True, stdout=subprocess.PIPE,stderr=subprocess.PIPE)
    output = ps.communicate()
    container_list = []
    for line in output[0].splitlines():
        #print line
        if line.strip().endswith('-igrader'):
            container_list.append(line.split()[0])
    if len(container_list) > 0:
        cmd = 'docker rm %s' % ' '.join(container_list)
        print cmd
        os.system(cmd)

    lab = sys.argv[1]
    cmd = 'docker images | grep grader'
    ps = subprocess.Popen(cmd, shell=True, stdout=subprocess.PIPE,stderr=subprocess.PIPE)
    output = ps.communicate()
    image = 'labtainer.grader'
    image_find = '/%s' % image
    image_find2 = '%s' % image
    image_list = []
    for line in output[0].splitlines():
        #print line
        if (image_find in line or line.startswith(image_find2)) and ' <none> ' not in line:
            parts = line.split()
            image = '%s:%s' % (parts[0], parts[1])
            image_list.append(image)
    if len(image_list) > 0:
        cmd = 'docker rmi -f %s' % ' '.join(image_list)
        print cmd
        os.system(cmd)
    else:   
        print('No images for %s' % image)
    cmd = 'docker pull %s/labtainer.grader' % registry
    os.system(cmd)

def main():
    parser = argparse.ArgumentParser(description='Grade a Labtainers lab')
    parser.add_argument('labname', help='The lab to grade')
    parser.add_argument('-r', '--redo', action='store_true', help='Creates new instance of the lab, previous work will be lost.')
    parser.add_argument('-d', '--debug', action='store_true', help='Create the grading container leave it running with a terminal')
    parser.add_argument('-t', '--test_registry', action='store_true', help='Use image from test registry')
    parser.add_argument('-u', '--update', action='store_true', help='Update grader image, deletes existing grader containers')
    parser.add_argument('-a', '--add_terminal', action='store_true', help='Create an additional virtual terminal attached to an existing grade \
                               container started with the -d option')
    args = parser.parse_args()
    labname = args.labname
    if args.add_terminal:
        moreTerm(labname)
    else:
        doGrade(labname, args.test_registry, args.debug, args.redo, args.update)

    
labutils.logger = LabtainerLogging.LabtainerLogging("grader.log", 'instructor', "../../config/labtainer.config")
labutils.logger.info("Begin logging") 
logger = labutils.logger
if __name__ == '__main__':
    sys.exit(main())
