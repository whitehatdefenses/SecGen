<%
  require 'json'
  require 'securerandom'
  require 'digest/sha1'
  require 'fileutils'
  require 'erb'

  if self.accounts.empty?
    abort('Sorry, you need to provide an account')
  end

  $first_account = JSON.parse(self.accounts.first)
  $main_user = $first_account['username'].to_s
  $main_user_pass = $first_account['password'].to_s

  # $second_account = JSON.parse(self.accounts[1])
  # $second_user = $second_account['username'].to_s
  # $second_password = $second_account['password'].to_s
  #
  # $third_account = JSON.parse(self.accounts[2])
  # $third_user = $third_account['username'].to_s
  # $third_password = $third_account['password'].to_s

  # $fourth_account = JSON.parse(self.accounts[3])
  # $fourth_user = $third_account['username'].to_s
  # $fourth_password = $third_account['password'].to_s

  $docker_esc_server_ip = self.docker_esc_server_ip.first
  $chroot_esc_server_ip = self.chroot_esc_server_ip.first
  $root_password = self.root_password
  $flags = self.flags

  REQUIRED_FLAGS = 0
  while $flags.length < REQUIRED_FLAGS
    $flags << "flag{#{SecureRandom.hex}}"
    Print.err "Warning: Not enough flags provided to hackerbot_config generator, some flags won't be tracked/marked!"
  end

  def get_binding
    binding
  end
-%>
<?xml version="1.0"?>

<hackerbot
               xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
               xsi:schemaLocation="http://www.github/cliffe/SecGen/hackerbot">
<!--<hackerbot xmlns="http://www.github/cliffe/SecGen/hackerbotz"-->

	<name>Hackerbot</name>

	<AIML_chatbot_rules>config/AIML</AIML_chatbot_rules>

	<!--Method for gaining shell access, can be overwritten per-attack-->
  <get_shell>sshpass -p <%= $root_password %> ssh -oStrictHostKeyChecking=no root@{{chat_ip_address}} /bin/bash</get_shell>

	<messages>
		<show_attack_numbers />

		<greeting>Hi there. I need you to hack some servers for me. There are flags to be found.</greeting>

		<!--Must provide alternatives for each message-->
		<say_ready>When you are ready, simply say 'ready'.</say_ready>
		<say_ready>'Ready'?</say_ready>
		<next>Ok, I'll do what I can to move things along...</next>
		<next>Moving things along to the next one...</next>
		<previous>Ok, I'll do what I can to back things up...</previous>
		<previous>Ok, backing up.</previous>
		<goto>Ok, skipping it along.</goto>
		<goto>Let me see what I can do to goto that attack.</goto>
		<last_attack>That was the last one for now. You can rest easy, until next time... (End.)</last_attack>
		<last_attack>That was the last one. Game over?</last_attack>
		<first_attack>You are back to the beginning!</first_attack>
		<first_attack>This is where it all began.</first_attack>
		<getting_shell>Doing my thing...</getting_shell>
		<getting_shell>Here we go...</getting_shell>
		<got_shell>...</got_shell>
		<got_shell>....</got_shell>
		<repeat>Let me know when you are 'ready', if you want to move on say 'next', or 'previous' and I'll move things along.</repeat>
		<repeat>Say 'ready', 'next', or 'previous'.</repeat>

		<!--Single responses:-->
		<help>I am waiting for you to say 'ready', 'next', 'previous', 'list', 'goto *X*', or 'answer *X*'</help>
		<say_answer>Say "The answer is *X*".</say_answer>
		<no_quiz>There is no question to answer</no_quiz>
		<correct_answer>Correct</correct_answer>
		<incorrect_answer>Incorrect</incorrect_answer>
		<invalid>That's not possible.</invalid>
		<non_answer>Wouldn't you like to know.</non_answer>

		<!--can be overwritten per-attack-->
		<shell_fail_message>Oh no. Failed to get shell... You need to let us in.</shell_fail_message>
	</messages>

	<tutorial_info>
		<title>Containers</title>
		<tutorial><%= ERB.new(File.read self.templates_path + 'intro.md.erb').result(self.get_binding) %></tutorial>
		<footer>
<%= File.read self.templates_path + 'resources.md.erb' %>

<%= File.read self.templates_path + 'license.md.erb' %>

Randomised instance generated by [SecGen](http://github.com/cliffe/SecGen) (<%= Time.new.to_s %>)
		</footer>

		<provide_tutorial>true</provide_tutorial>

	</tutorial_info>

  <attack>
		<prompt>You need to find a way into then escape to root a docker container (<%= $docker_esc_server_ip %>) and a chroot container (<%= $chroot_esc_server_ip %>). Hints: the flags are stored in /root/ on the two VMs but you first need to find your way in (try a port scan and try connecting to open ports), and then escape confinement. Good luck!</prompt>

		<condition>
			<output_matches>.*</output_matches>
			<message>:)</message>
			<trigger_next_attack />
		</condition>
    <condition>
			<output_matches>.*</output_matches>
			<message>:)</message>
			<trigger_next_attack />
		</condition>
		<else_condition>
			<message>:)</message>
		</else_condition>

    <tutorial>
      <%= ERB.new(File.read self.templates_path + 'containers.md.erb').result(self.get_binding) %>
    </tutorial>

	</attack>


<!-- TODO: add another attack where HB uses a hardlink attack against the SUID program - they have to fix the problem  -->

</hackerbot>
