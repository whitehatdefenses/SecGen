<%
  require 'json'
  require 'securerandom'
  require 'digest/sha1'
  require 'fileutils'
  require 'erb'

  if self.accounts.empty?
    abort('Sorry, you need to provide an account')
  end

  $first_account = JSON.parse(self.accounts.first)
  $second_account = JSON.parse(self.accounts[1])

  $files = []
  $log_files = []
  if $second_account.key?("leaked_filenames") &&  $second_account['leaked_filenames'].size > 0
    $files = $second_account['leaked_filenames']
    $log_files = $second_account['leaked_filenames'].grep(/log/)
  end

  if $files.empty?
    $files = ['myfile', 'afile', 'filee', 'thefile']
  end
  if $log_files.empty?
    $log_files = ['log', 'thelog', 'logs', 'frogonalog']
  end

  $main_user = $first_account['username'].to_s
  $main_user_pass = $first_account['password'].to_s
  $second_user = $second_account['username'].to_s
  $example_file = "/home/#{$second_user}/#{$files.sample}"
  $example_dir = "/home/#{$second_user}/personal_secrets/"

  $web_server_ip = self.web_server_ip.first
  $ids_server_ip = self.ids_server_ip.first
  $hackerbot_server_ip = self.hackerbot_server_ip.first
  $root_password = self.root_password
  $flags = self.flags

  REQUIRED_FLAGS = 7
  while $flags.length < REQUIRED_FLAGS
    $flags << "flag{#{SecureRandom.hex}}"
    Print.err "Warning: Not enough flags provided to hackerbot_config generator, some flags won't be tracked/marked!"
  end

  def get_binding
    binding
  end
%>
<?xml version="1.0"?>

<hackerbot
               xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
               xsi:schemaLocation="http://www.github/cliffe/SecGen/hackerbot">
<!--<hackerbot xmlns="http://www.github/cliffe/SecGen/hackerbotz"-->

	<name>Hackerbot</name>

	<AIML_chatbot_rules>config/AIML</AIML_chatbot_rules>

	<!--Method for gaining shell access, can be overwritten per-attack-->
	<!--<get_shell>bash</get_shell>-->
	<get_shell>false</get_shell>

	<messages>
		<show_attack_numbers />

		<greeting>Hi there. It seems we have a server that's been compromised. Investigate for me, and I'll give you some flags.</greeting>

		<!--Must provide alternatives for each message-->
		<say_ready>When you are ready, simply say 'ready'.</say_ready>
		<say_ready>'Ready'?</say_ready>
		<next>Ok, I'll do what I can to move things along...</next>
		<next>Moving things along to the next one...</next>
		<previous>Ok, I'll do what I can to back things up...</previous>
		<previous>Ok, backing up.</previous>
		<goto>Ok, skipping it along.</goto>
		<goto>Let me see what I can do to goto that attack.</goto>
		<last_attack>That was the last one for now. You can rest easy, until next time... (End.)</last_attack>
		<last_attack>That was the last one. Game over?</last_attack>
		<first_attack>You are back to the beginning!</first_attack>
		<first_attack>This is where it all began.</first_attack>
		<getting_shell>Doing my thing...</getting_shell>
		<getting_shell>Here we go...</getting_shell>
		<got_shell>...</got_shell>
		<got_shell>....</got_shell>
		<repeat>Let me know when you are 'ready', if you want to move on say 'next', or 'previous' and I'll move things along.</repeat>
		<repeat>Say 'ready', 'next', or 'previous'.</repeat>

		<!--Single responses:-->
		<help>I am waiting for you to say 'ready', 'next', 'previous', 'list', 'goto *X*', or 'answer *X*'</help>
		<say_answer>Say "The answer is *X*".</say_answer>
		<no_quiz>There is no question to answer</no_quiz>
		<correct_answer>Correct</correct_answer>
		<incorrect_answer>Incorrect</incorrect_answer>
		<invalid>That's not possible.</invalid>
		<non_answer>Wouldn't you like to know.</non_answer>

		<!--can be overwritten per-attack-->
		<shell_fail_message>Oh no. Failed to get shell... You need to let us in.</shell_fail_message>
	</messages>

	<tutorial_info>
		<title>Live Analysis</title>
		<tutorial><%= ERB.new(File.read self.templates_path + 'intro.md.erb').result(self.get_binding) %></tutorial>
		<footer>
<%= File.read self.templates_path + 'resources.md.erb' %>

<%= File.read self.templates_path + 'license.md.erb' %>

Randomised instance generated by [SecGen](http://github.com/cliffe/SecGen) (<%= Time.new.to_s %>)
		</footer>

		<provide_tutorial>true</provide_tutorial>

	</tutorial_info>

	<attack>
<% $rand_name1 = SecureRandom.hex(3)
   $flag1 = $flags.pop
   $flag2 = $flags.pop
%>

		<pre_shell>sshpass -p <%= $root_password %> scp -prv -oStrictHostKeyChecking=no root@{{chat_ip_address}}:/home/<%= $main_user %>/evidence/<%= $rand_name1 %> /tmp/susp_trojans; echo $?; cat /tmp/susp_trojans | sort</pre_shell>
		<get_shell>false</get_shell>
		<prompt>Create a list of the potentially trojanised executables on the compromised system, save to your Desktop VM in /home/<%= $main_user %>/evidence/<%= $rand_name1 %>. Use full pathnames, one per line.</prompt>

		<condition>
			<output_matches>/lib/.x/|/root/sslstop/</output_matches>
			<message>:( Only include the programs that are typically found on a Linux system, but that seem to have been replaced with Trojans horses.</message>
		</condition>
		<condition>
			<output_matches>/bin/ls.*/bin/netstat.*/bin/ps.*/sbin/ifconfig.*/usr/bin/top</output_matches>
			<message>:-D Well done! Two flags for you! <%= $flag1 %>, <%= $flag2 %>.</message>
			<trigger_next_attack />
		</condition>
		<condition>
			<output_matches>/bin/ls|/bin/netstat|/bin/ps|/sbin/ifconfig|/usr/bin/top</output_matches>
			<message>:) Well done! <%= $flag1 %>. You have some but not all. There are more flags to be had, by including more. (Also, you need to sort them alphabetically)</message>
		</condition>
		<condition>
			<output_matches>1</output_matches>
			<message>:( Failed to get the file.</message>
		</condition>
		<else_condition>
			<message>:( List is incomplete...</message>
		</else_condition>

		<tutorial><%= ERB.new(File.read self.templates_path + 'timeline.md.erb').result(self.get_binding) %></tutorial>
	</attack>

	<attack>
<% $rand_name2 = SecureRandom.hex(3) %>
		<pre_shell>sshpass -p <%= $root_password %> scp -prv -oStrictHostKeyChecking=no root@{{chat_ip_address}}:/home/<%= $main_user %>/evidence/<%= $rand_name2 %> /tmp/susp_pids; echo --$?; cat /tmp/susp_pids</pre_shell>
		<get_shell>false</get_shell>

		<prompt>Create a list of IP addresses you beleive have attempted to log in to the system using SSH or Telnet. Save to your Desktop VM in /home/<%= $main_user %>/evidence/<%= $rand_name2 %>.</prompt>

		<condition>
			<output_matches>202.85.165.45|202.85.165.46|192.109.122.5|193.109.122.5</output_matches>
			<message>:) Well done! <%= $flags.pop %>.</message>
			<trigger_quiz />
		</condition>
		<condition>
			<output_matches>--1</output_matches>
			<message>:( Failed to get file.</message>
		</condition>
		<else_condition>
			<message>:( List is incomplete...</message>
		</else_condition>

<%  $questions = {'What is the approximate longitude of the IP addresses that have attempted to log in to the system using SSH or Telnet?'=>'4\.|114\.','What countries are the IP addresses that have attempted to log in to the system using SSH or Telnet'=>'Hong Kong|Netherlands'}
    $rand_question1 = $questions.keys.sample %>

		<quiz>
			<question><%= $rand_question1 %></question>
			<answer><%= $questions[$rand_question1] %></answer>
			<correct_answer_response>:) <%= $flags.pop %></correct_answer_response>
			<trigger_next_attack />
		</quiz>

    <tutorial><%= ERB.new(File.read self.templates_path + 'logs.md.erb').result(self.get_binding) %></tutorial>

	</attack>

	<attack>
<% $rand_name3 = SecureRandom.hex(3) %>
		<pre_shell>sshpass -p <%= $root_password %> scp -prv -oStrictHostKeyChecking=no root@{{chat_ip_address}}:/home/<%= $main_user %>/evidence/<%= $rand_name3 %> /tmp/susp_email; echo $?; cat /tmp/susp_email</pre_shell>
		<get_shell>false</get_shell>

		<prompt>Save the email addresses that messages were sent to. Save to your Desktop VM in /home/<%= $main_user %>/evidence/<%= $rand_name3 %>.</prompt>

		<condition>
			<output_matches>newtraceuser@yahoo.com|skiZophrenia_siCk@yahoo.com|jijeljijel@yahoo.com</output_matches>
			<message>:) Well done! <%= $flags.pop %>.</message>
			<trigger_next_attack />
		</condition>
		<condition>
			<output_matches>1</output_matches>
			<message>:( Failed to get the file.</message>
		</condition>
		<else_condition>
			<message>:( Something was not right...</message>
		</else_condition>


	</attack>

	<attack>
<% $rand_name4 = SecureRandom.hex(3) %>
		<pre_shell>sshpass -p <%= $root_password %> scp -prv -oStrictHostKeyChecking=no root@{{chat_ip_address}}:/home/<%= $main_user %>/evidence/<%= $rand_name4 %> /tmp/susp_wget; echo $?; cat /tmp/susp_wget</pre_shell>
		<get_shell>false</get_shell>

		<prompt>Save the wget commands used to download rootkits. Save to your Desktop VM in /home/<%= $main_user %>/evidence/<%= $rand_name4 %>.</prompt>

		<condition>
			<output_matches>wget geocities.com</output_matches>
			<message>:) Well done! <%= $flags.pop %>.</message>
			<trigger_quiz />
		</condition>
		<condition>
			<output_matches>1</output_matches>
			<message>:( Failed to get the file.</message>
		</condition>
		<else_condition>
			<message>:( List is incomplete...</message>
		</else_condition>

		<quiz>
			<question>What country is the attacker likely from?</question>
			<answer>Romania</answer>
			<correct_answer_response>:) <%= $flags.pop %></correct_answer_response>
			<trigger_next_attack />
		</quiz>

		<tutorial><%= ERB.new(File.read self.templates_path + 'deleted.md.erb').result(self.get_binding) %></tutorial>

	</attack>

</hackerbot>
