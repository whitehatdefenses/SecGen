### Timeline analysis

It helps to reconstruct the timeline of events on the system, to get a better understanding. Software such as Sluthkit (either using the Autopsy frontend or the mactime command line tool) analyses the MAC times of files (that is, the most recent modification, most recent access, and most recent inode change[^1]) to reconstruct a sequence of file access events.

In another Firefox tab, ==visit [*http://localhost:9999/autopsy*](http://localhost:9999/autopsy), click "Open Case", "Ok", "Ok".==

==Click "File Activity Timelines".==

==Click "Create Data File".==

==Select "/1/ hda1.img-0-0 ext".==

==Click "Ok".==

==Click "Ok".==

For "2. Enter the starting date" ==Select "Specify" and enter July 1 2003.==

> The access date you previously recorded (for "/lib/.x/.boot") was in August 2003, so this is probably a good place to start.

For "5. Select the UNIX image that contains the /etc/passwd and /etc/group files", ==select "hda1.img-0-0".==

Wait while a timeline is generated.

Make a note/copy of the URL to the .txt file version, which can come in handy if the HTML version has any issues.

==Click "Ok".==

Once analysis is complete, the timeline is presented.

> If you get an error message rather than a table, you can simply view the .txt file version, or review the options selected and rerun the analysis.

==Click "Summary".==

==Browse through the history.== Note that it is very detailed, and it is easy to get lost (and waste time) in irrelevant detail.

==Browse to August 2003 on the timeline==, and follow along:

Note that on the 6th of August it seems many files were accessed, and not altered (displayed as ".a.."[^2]). This is probably the point at which the md5 hashes of all the files on the system were collected.

On 9th August a number of config files were accessed including "/sbin/runlevel", "/sbin/ipchains", and "/bin/login". This indicates that the system was likely rebooted at this time.

On 10th August, a number of files that have since been deleted were accessed.

Shortly thereafter the inode data was changed (displayed as "..c.") for many files. Then many files owned by the *apache* user were last modified before they were deleted. The apache user goes on to access some more files, and then a number of header files (.h) were accessed, presumably in order to compile a C program from source. Directly after, some files were created, including "/usr/lib/adore", the Adore rootkit.

At 23:30:54 /root/.bash\_history and /var/log/messages were symlinked to /dev/null.

Next more header files were accessed, this time Linux kernel headers, presumably to compile a kernel module (or perhaps some code that tries to tamper with the kernel). This was followed by the creation of the SuckIT rootkit files, which we previously investigated.

Note that a number of these files are created are again owned by the "apache" user.

What does this tell you about the likely source of the compromise?

Further down, note the creation of the /root/sslstop.tar.gz file which was extracted (files created), then compiled and run. Shortly after, the Apache config file (/etc/httpd/conf/httpd.conf) was modified.

Why would an attacker, after compromising a system, want to stop SSL support in Apache?

Meanwhile the attacker has accidently created a /.bash\_history, which has not been deleted.

Further down we see wget accessed and used to download the /etc/opt/psyBNC2.3.1.tar.gz file, which we investigated earlier.

This file was then extracted, and the program compiled. This involved accessing many header (.h) files. Finally, the "/etc/opt/psybnc/psybnc.conf" file is modified, presumably by the attacker, in order to configure the behaviour of the program.

---
