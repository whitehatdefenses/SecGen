<?xml version="1.0"?>

<scenario xmlns="http://www.github/cliffe/SecGen/scenario"
	   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	   xsi:schemaLocation="http://www.github/cliffe/SecGen/scenario">

	<name>Crackable User Accounts Example</name>
	<author>Jason Zeller</author>

	<description>
		This scenario gives examples of crackable user accounts based on certain passwords.
	</description>

	<type>ctf</type>
	<difficulty>easy</difficulty>

	<system>
		<system_name>server</system_name>
		<base platform="linux" type="server"/>

    <!-- Generate ncrack_and jtr passwords for use with their respective vulnerability below -->
    <input into_datastore="passwords">
      <!-- The custom_list_password generator will take any filename from: lib/resources/passwordlists/ -->
      <generator type="custom_list_password">
        <input into="list_name">
          <value>ncrackpassword.lst</value>
        </input>
      </generator>
      <generator type="custom_list_password">
        <input into="list_name">
          <value>jtrpassword.lst</value>
        </input>
      </generator>
    </input>

    <!-- Generate a basic crackable user account using the random_weak_password generator -->
    <!-- Generated password is not released as a flag -->
    <vulnerability name="Crackable User Account"/>

    <!-- Use ncrack_crackable_user_account vulnerability to add a user account to system -->
    <!-- This vulnerability is designed for a hacker to use the 'ncrack' utility in Kali with a default password list-->
    <!-- Hints for using this utility are available -->
    <!-- See ncrack_crackable_user_account vulnerability for more information -->
    <!-- This creates a flag that is the generated password from selected list: flag{password} -->
    <vulnerability module_path=".*/ncrack_crackable_user_account.*">
      <input into="password">
        <datastore access="0">passwords</datastore>
      </input>
      <input into="flag_password">
        <generator type="concat_flag_generator">
          <input into="strings_to_join">
            <datastore access="0">passwords</datastore>
          </input>
        </generator>
      </input>
      <input into="leaked_filenames">
        <value>flag_here</value>
      </input>
      <input into="strings_to_leak">
        <value>So, you think you are an expert huh? I wonder if you can figure out my password.</value>
        <value>This account password is also a flag. For example, if the password is "123456" the flag is: flag{123456}</value>
        <value>Here is a flag for finding this message:</value>
        <generator type="flag_generator"/>
      </input>
      <input into="account">
        <generator type="account">
          <input into="username">
            <value>guest</value>
          </input>
        </generator>
      </input>
    </vulnerability>

    <!-- Use jtr_crackable_user_account vulnerability to add a user account to system -->
    <!-- This vulnerability is designed for a hacker to use the 'john' utility in Kali with a default password list -->
    <!-- Hints for using this utility are available -->
    <!-- See jtr_crackable_user_account vulnerability for more information -->
    <!-- This creates a flag that is the generated password from selected list: flag{password} -->
    <vulnerability module_path=".*/jtr_crackable_user_account.*">
      <input into="password">
        <datastore access="1">passwords</datastore>
      </input>
      <input into="flag_password">
        <generator type="concat_flag_generator">
          <input into="strings_to_join">
            <datastore access="1">passwords</datastore>
          </input>
        </generator>
      </input>
      <input into="leaked_filenames">
        <value>flag_here</value>
      </input>
      <input into="strings_to_leak">
        <value>So, you think you are an expert huh? I wonder if you can figure out my password.</value>
        <value>This account password is also a flag. For example, if the password is "123456" the flag is: flag{123456}</value>
        <value>Here is a flag for finding this message:</value>
        <generator type="flag_generator"/>
      </input>
    </vulnerability>

  </system>

</scenario>
